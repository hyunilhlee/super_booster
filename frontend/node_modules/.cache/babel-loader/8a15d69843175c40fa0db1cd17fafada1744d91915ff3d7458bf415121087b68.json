{"ast":null,"code":"// 한글 날짜 문자열을 Date 객체로 변환\nconst parseKoreanDate = dateStr => {\n  try {\n    // \"2024년 12월 10일\" 형식의 문자열을 파싱\n    const matches = dateStr.match(/(\\d{4})년\\s+(\\d{1,2})월\\s+(\\d{1,2})일/);\n    if (!matches) {\n      throw new Error('날짜 형식이 맞지 않음');\n    }\n    const [, year, month, day] = matches;\n    // UTC 기준으로 날짜 생성 (시간은 00:00:00으로 설정)\n    return new Date(Date.UTC(parseInt(year), parseInt(month) - 1,\n    // 월은 0부터 시작\n    parseInt(day)));\n  } catch (error) {\n    console.error('한글 날짜 파싱 에러:', error, '원본 데이터:', dateStr);\n    throw error;\n  }\n};\n\n// 게시 기간에 따른 T값 반환\nconst getTimeWeight = publishedAt => {\n  const now = new Date();\n\n  // publishedAt이 없는 경우 처리\n  if (!publishedAt) {\n    console.error('업로드 날짜 정보 없음');\n    return 14; // 기본값으로 가장 긴 기간 적용\n  }\n  let published;\n  try {\n    published = parseKoreanDate(publishedAt);\n\n    // 유효하지 않은 날짜인 경우\n    if (isNaN(published.getTime())) {\n      console.error('유효하지 않은 날짜:', publishedAt);\n      return 14;\n    }\n  } catch (error) {\n    console.error('날짜 파싱 에러:', error, '원본 데이터:', publishedAt);\n    return 14;\n  }\n  const diffDays = Math.floor((now.getTime() - published.getTime()) / (1000 * 60 * 60 * 24));\n  let timeWeight;\n  let period;\n  if (diffDays <= 6) {\n    timeWeight = 1;\n    period = \"0~6일\";\n  } else if (diffDays <= 13) {\n    timeWeight = 1;\n    period = \"7~13일\";\n  } else if (diffDays <= 20) {\n    timeWeight = 2;\n    period = \"2주\";\n  } else if (diffDays <= 27) {\n    timeWeight = 3;\n    period = \"3주\";\n  } else if (diffDays <= 34) {\n    timeWeight = 4;\n    period = \"4주\";\n  } else if (diffDays <= 62) {\n    timeWeight = 6;\n    period = \"1개월\";\n  } else if (diffDays <= 90) {\n    timeWeight = 10;\n    period = \"2개월\";\n  } else {\n    timeWeight = 14;\n    period = \"3개월 이상\";\n  }\n\n  // 날짜를 한국 시간 기준으로 포맷팅\n  const formatDate = date => {\n    return date.toLocaleString('ko-KR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  console.log('시간 가중치 계산:', {\n    원본날짜: publishedAt,\n    파싱된_업로드일: formatDate(published),\n    현재시간: formatDate(now),\n    경과일수: diffDays,\n    기간구분: period,\n    가중치: timeWeight\n  });\n  return timeWeight;\n};\n\n// 구독자 수에 따른 범위 계수(Rm) 반환\nconst getSubscriberRangeMultiplier = subscriberCount => {\n  if (subscriberCount < 1000) return {\n    min: 0.3,\n    max: 0.5\n  }; // 1천명 미만\n  if (subscriberCount < 10000) return {\n    min: 0.2,\n    max: 0.4\n  }; // 1천~1만\n  if (subscriberCount < 100000) return {\n    min: 0.15,\n    max: 0.3\n  }; // 1~10만\n  if (subscriberCount < 500000) return {\n    min: 0.08,\n    max: 0.2\n  }; // 10~50만\n  if (subscriberCount < 1000000) return {\n    min: 0.05,\n    max: 0.15\n  }; // 50~100만\n  return {\n    min: 0.02,\n    max: 0.1\n  }; // 100만 이상\n};\n\n// 구독자 수에 따른 좋아요 비율 범위(Pm) 반환\nconst getLikeRangeMultiplier = subscriberCount => {\n  if (subscriberCount < 1000) return {\n    min: 0.05,\n    max: 0.1\n  };\n  if (subscriberCount < 10000) return {\n    min: 0.04,\n    max: 0.08\n  };\n  if (subscriberCount < 100000) return {\n    min: 0.03,\n    max: 0.06\n  };\n  if (subscriberCount < 500000) return {\n    min: 0.02,\n    max: 0.05\n  };\n  if (subscriberCount < 1000000) return {\n    min: 0.015,\n    max: 0.04\n  };\n  return {\n    min: 0.01,\n    max: 0.03\n  };\n};\n\n// 구독자 수에 따른 댓글 비율 범위(Qm) 반환\nconst getCommentRangeMultiplier = subscriberCount => {\n  if (subscriberCount < 1000) return {\n    min: 0.005,\n    max: 0.015\n  };\n  if (subscriberCount < 10000) return {\n    min: 0.004,\n    max: 0.01\n  };\n  if (subscriberCount < 100000) return {\n    min: 0.003,\n    max: 0.008\n  };\n  if (subscriberCount < 500000) return {\n    min: 0.002,\n    max: 0.006\n  };\n  if (subscriberCount < 1000000) return {\n    min: 0.002,\n    max: 0.005\n  };\n  return {\n    min: 0.001,\n    max: 0.003\n  };\n};\nexport const calculatePerformanceMetrics = (videoStats, subscriberCount) => {\n  const N = videoStats.length;\n  if (N === 0) return null;\n  console.log('=== 성과지표 계산 시작 ===');\n  console.log('입력된 비디오 데이터:', videoStats);\n  console.log('구독자 수:', subscriberCount.toLocaleString(), '명');\n  console.log('분석 동영상 수:', N, '개');\n\n  // 1. 시간 보정된 조회수 계산\n  console.log('\\n=== 각 동영상 시간 보정 조회수 계산 ===');\n  const adjustedViews = videoStats.map((stat, index) => {\n    console.log(`\\n[동영상 ${index + 1}번 원본 데이터]`, stat);\n    if (!stat.publishedAt) {\n      console.error(`동영상 ${index + 1}번의 publishedAt 정보가 없음:`, stat);\n      return 0;\n    }\n    const timeWeight = getTimeWeight(stat.publishedAt);\n    const adjustedView = stat.viewCount / Math.sqrt(timeWeight);\n    console.log(`[동영상 ${index + 1}번 계산 결과]`);\n    console.log('원본 조회수:', stat.viewCount.toLocaleString(), '회');\n    console.log('보정된 조회수:', Math.round(adjustedView).toLocaleString(), '회');\n    console.log('보정 배수:', Math.sqrt(timeWeight).toFixed(2), '배');\n    return adjustedView;\n  });\n\n  // 조회수 평균 계산\n  const averageAdjustedViews = adjustedViews.reduce((sum, view) => sum + view, 0) / N;\n  console.log('\\n=== 평균 보정 조회수 ===');\n  console.log('평균값:', Math.round(averageAdjustedViews).toLocaleString(), '회');\n\n  // 구독자수 대비 기준값 계산\n  const rangeMultiplier = getSubscriberRangeMultiplier(subscriberCount);\n  console.log('구독자수 대비 기준값:', rangeMultiplier);\n  const viewsMinThreshold = rangeMultiplier.min * subscriberCount;\n  const viewsMaxThreshold = rangeMultiplier.max * subscriberCount;\n  console.log('\\n=== 조회수 성과 기준 ===');\n  console.log('최소 기준:', Math.round(viewsMinThreshold).toLocaleString(), '회');\n  console.log('최대 기준:', Math.round(viewsMaxThreshold).toLocaleString(), '회');\n  console.log('실제 평균:', Math.round(averageAdjustedViews).toLocaleString(), '회');\n\n  // 2. 조회수 대비 좋아요 비율 계산\n  console.log('\\n=== 좋아요 비율 계산 ===');\n  const likeRatios = videoStats.map((stat, index) => {\n    const ratio = stat.likeCount / stat.viewCount;\n    console.log(`[동영상 ${index + 1}번] 좋아요율:`, (ratio * 100).toFixed(2), '%', `(좋아요 ${stat.likeCount.toLocaleString()}개 / 조회수 ${stat.viewCount.toLocaleString()}회)`);\n    return ratio;\n  });\n  const averageLikeRatio = likeRatios.reduce((sum, ratio) => sum + ratio, 0) / N;\n  const likeMultiplier = getLikeRangeMultiplier(subscriberCount);\n  const likeMinThreshold = likeMultiplier.min;\n  const likeMaxThreshold = likeMultiplier.max;\n  console.log('\\n좋아요 성과 기준:');\n  console.log('최소 기준:', (likeMinThreshold * 100).toFixed(2), '%');\n  console.log('최대 기준:', (likeMaxThreshold * 100).toFixed(2), '%');\n  console.log('실제 평균:', (averageLikeRatio * 100).toFixed(2), '%');\n\n  // 3. 조회수 대비 댓글 비율 계산\n  console.log('\\n=== 댓글 비율 계산 ===');\n  const commentRatios = videoStats.map((stat, index) => {\n    const ratio = stat.commentCount / stat.viewCount;\n    console.log(`[동영상 ${index + 1}번] 댓글율:`, (ratio * 100).toFixed(2), '%', `(댓글 ${stat.commentCount.toLocaleString()}개 / 조회수 ${stat.viewCount.toLocaleString()}회)`);\n    return ratio;\n  });\n  const averageCommentRatio = commentRatios.reduce((sum, ratio) => sum + ratio, 0) / N;\n  const commentMultiplier = getCommentRangeMultiplier(subscriberCount);\n  console.log('구독자수 대비 댓글 비율 기준값:', commentMultiplier);\n  const commentMinThreshold = commentMultiplier.min;\n  const commentMaxThreshold = commentMultiplier.max;\n  console.log('\\n댓글 성과 기준:');\n  console.log('최소 ���준:', (commentMinThreshold * 100).toFixed(2), '%');\n  console.log('최대 기준:', (commentMaxThreshold * 100).toFixed(2), '%');\n  console.log('실제 평균:', (averageCommentRatio * 100).toFixed(2), '%');\n\n  // 각 지표의 등급 판정\n  const getPerformanceLevel = (value, min, max) => {\n    if (value < min) return '미달';\n    if (value > max) return '우수';\n    return '적정';\n  };\n  const result = {\n    viewsPerformance: {\n      value: averageAdjustedViews,\n      level: getPerformanceLevel(averageAdjustedViews, viewsMinThreshold, viewsMaxThreshold)\n    },\n    likePerformance: {\n      value: averageLikeRatio,\n      level: getPerformanceLevel(averageLikeRatio, likeMinThreshold, likeMaxThreshold)\n    },\n    commentPerformance: {\n      value: averageCommentRatio,\n      level: getPerformanceLevel(averageCommentRatio, commentMinThreshold, commentMaxThreshold)\n    }\n  };\n  console.log('\\n=== 최종 성과 등급 ===');\n  console.log('조회수:', result.viewsPerformance.level);\n  console.log('좋아요:', result.likePerformance.level);\n  console.log('댓글:', result.commentPerformance.level);\n  return result;\n};","map":{"version":3,"names":["parseKoreanDate","dateStr","matches","match","Error","year","month","day","Date","UTC","parseInt","error","console","getTimeWeight","publishedAt","now","published","isNaN","getTime","diffDays","Math","floor","timeWeight","period","formatDate","date","toLocaleString","hour","minute","log","원본날짜","파싱된_업로드일","현재시간","경과일수","기간구분","가중치","getSubscriberRangeMultiplier","subscriberCount","min","max","getLikeRangeMultiplier","getCommentRangeMultiplier","calculatePerformanceMetrics","videoStats","N","length","adjustedViews","map","stat","index","adjustedView","viewCount","sqrt","round","toFixed","averageAdjustedViews","reduce","sum","view","rangeMultiplier","viewsMinThreshold","viewsMaxThreshold","likeRatios","ratio","likeCount","averageLikeRatio","likeMultiplier","likeMinThreshold","likeMaxThreshold","commentRatios","commentCount","averageCommentRatio","commentMultiplier","commentMinThreshold","commentMaxThreshold","getPerformanceLevel","value","result","viewsPerformance","level","likePerformance","commentPerformance"],"sources":["/Users/hyunillee/Projects/analysis_youtube/frontend/src/utils/performanceCalculator.ts"],"sourcesContent":["interface VideoStats {\n  viewCount: number;\n  likeCount: number;\n  commentCount: number;\n  publishedAt: string;\n}\n\n// 한글 날짜 문자열을 Date 객체로 변환\nconst parseKoreanDate = (dateStr: string): Date => {\n  try {\n    // \"2024년 12월 10일\" 형식의 문자열을 파싱\n    const matches = dateStr.match(/(\\d{4})년\\s+(\\d{1,2})월\\s+(\\d{1,2})일/);\n    if (!matches) {\n      throw new Error('날짜 형식이 맞지 않음');\n    }\n    \n    const [, year, month, day] = matches;\n    // UTC 기준으로 날짜 생성 (시간은 00:00:00으로 설정)\n    return new Date(Date.UTC(\n      parseInt(year),\n      parseInt(month) - 1, // 월은 0부터 시작\n      parseInt(day)\n    ));\n  } catch (error) {\n    console.error('한글 날짜 파싱 에러:', error, '원본 데이터:', dateStr);\n    throw error;\n  }\n};\n\n// 게시 기간에 따른 T값 반환\nconst getTimeWeight = (publishedAt: string | undefined): number => {\n  const now = new Date();\n  \n  // publishedAt이 없는 경우 처리\n  if (!publishedAt) {\n    console.error('업로드 날짜 정보 없음');\n    return 14; // 기본값으로 가장 긴 기간 적용\n  }\n\n  let published: Date;\n  try {\n    published = parseKoreanDate(publishedAt);\n    \n    // 유효하지 않은 날짜인 경우\n    if (isNaN(published.getTime())) {\n      console.error('유효하지 않은 날짜:', publishedAt);\n      return 14;\n    }\n  } catch (error) {\n    console.error('날짜 파싱 에러:', error, '원본 데이터:', publishedAt);\n    return 14;\n  }\n\n  const diffDays = Math.floor((now.getTime() - published.getTime()) / (1000 * 60 * 60 * 24));\n\n  let timeWeight: number;\n  let period: string;\n\n  if (diffDays <= 6) {\n    timeWeight = 1;\n    period = \"0~6일\";\n  } else if (diffDays <= 13) {\n    timeWeight = 1;\n    period = \"7~13일\";\n  } else if (diffDays <= 20) {\n    timeWeight = 2;\n    period = \"2주\";\n  } else if (diffDays <= 27) {\n    timeWeight = 3;\n    period = \"3주\";\n  } else if (diffDays <= 34) {\n    timeWeight = 4;\n    period = \"4주\";\n  } else if (diffDays <= 62) {\n    timeWeight = 6;\n    period = \"1개월\";\n  } else if (diffDays <= 90) {\n    timeWeight = 10;\n    period = \"2개월\";\n  } else {\n    timeWeight = 14;\n    period = \"3개월 이상\";\n  }\n\n  // 날짜를 한국 시간 기준으로 포맷팅\n  const formatDate = (date: Date): string => {\n    return date.toLocaleString('ko-KR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  console.log('시간 가중치 계산:', {\n    원본날짜: publishedAt,\n    파싱된_업로드일: formatDate(published),\n    현재시간: formatDate(now),\n    경과일수: diffDays,\n    기간구분: period,\n    가중치: timeWeight\n  });\n\n  return timeWeight;\n};\n\n// 구독자 수에 따른 범위 계수(Rm) 반환\nconst getSubscriberRangeMultiplier = (subscriberCount: number): { min: number; max: number } => {\n  if (subscriberCount < 1000) return { min: 0.3, max: 0.5 };           // 1천명 미만\n  if (subscriberCount < 10000) return { min: 0.2, max: 0.4 };          // 1천~1만\n  if (subscriberCount < 100000) return { min: 0.15, max: 0.3 };        // 1~10만\n  if (subscriberCount < 500000) return { min: 0.08, max: 0.2 };        // 10~50만\n  if (subscriberCount < 1000000) return { min: 0.05, max: 0.15 };      // 50~100만\n  return { min: 0.02, max: 0.1 };                                      // 100만 이상\n};\n\n// 구독자 수에 따른 좋아요 비율 범위(Pm) 반환\nconst getLikeRangeMultiplier = (subscriberCount: number): { min: number; max: number } => {\n  if (subscriberCount < 1000) return { min: 0.05, max: 0.1 };\n  if (subscriberCount < 10000) return { min: 0.04, max: 0.08 };\n  if (subscriberCount < 100000) return { min: 0.03, max: 0.06 };\n  if (subscriberCount < 500000) return { min: 0.02, max: 0.05 };\n  if (subscriberCount < 1000000) return { min: 0.015, max: 0.04 };\n  return { min: 0.01, max: 0.03 };\n};\n\n// 구독자 수에 따른 댓글 비율 범위(Qm) 반환\nconst getCommentRangeMultiplier = (subscriberCount: number): { min: number; max: number } => {\n  if (subscriberCount < 1000) return { min: 0.005, max: 0.015 };\n  if (subscriberCount < 10000) return { min: 0.004, max: 0.01 };\n  if (subscriberCount < 100000) return { min: 0.003, max: 0.008 };\n  if (subscriberCount < 500000) return { min: 0.002, max: 0.006 };\n  if (subscriberCount < 1000000) return { min: 0.002, max: 0.005 };\n  return { min: 0.001, max: 0.003 };\n};\n\nexport const calculatePerformanceMetrics = (\n  videoStats: VideoStats[],\n  subscriberCount: number\n) => {\n  const N = videoStats.length;\n  if (N === 0) return null;\n\n  console.log('=== 성과지표 계산 시작 ===');\n  console.log('입력된 비디오 데이터:', videoStats);\n  console.log('구독자 수:', subscriberCount.toLocaleString(), '명');\n  console.log('분석 동영상 수:', N, '개');\n\n  // 1. 시간 보정된 조회수 계산\n  console.log('\\n=== 각 동영상 시간 보정 조회수 계산 ===');\n  const adjustedViews = videoStats.map((stat, index) => {\n    console.log(`\\n[동영상 ${index + 1}번 원본 데이터]`, stat);\n    \n    if (!stat.publishedAt) {\n      console.error(`동영상 ${index + 1}번의 publishedAt 정보가 없음:`, stat);\n      return 0;\n    }\n\n    const timeWeight = getTimeWeight(stat.publishedAt);\n    const adjustedView = stat.viewCount / Math.sqrt(timeWeight);\n    \n    console.log(`[동영상 ${index + 1}번 계산 결과]`);\n    console.log('원본 조회수:', stat.viewCount.toLocaleString(), '회');\n    console.log('보정된 조회수:', Math.round(adjustedView).toLocaleString(), '회');\n    console.log('보정 배수:', Math.sqrt(timeWeight).toFixed(2), '배');\n    \n    return adjustedView;\n  });\n\n  // 조회수 평균 계산\n  const averageAdjustedViews = adjustedViews.reduce((sum, view) => sum + view, 0) / N;\n  console.log('\\n=== 평균 보정 조회수 ===');\n  console.log('평균값:', Math.round(averageAdjustedViews).toLocaleString(), '회');\n  \n  // 구독자수 대비 기준값 계산\n  const rangeMultiplier = getSubscriberRangeMultiplier(subscriberCount);\n  console.log('구독자수 대비 기준값:', rangeMultiplier);\n  const viewsMinThreshold = rangeMultiplier.min * subscriberCount;\n  const viewsMaxThreshold = rangeMultiplier.max * subscriberCount;\n  \n  console.log('\\n=== 조회수 성과 기준 ===');\n  console.log('최소 기준:', Math.round(viewsMinThreshold).toLocaleString(), '회');\n  console.log('최대 기준:', Math.round(viewsMaxThreshold).toLocaleString(), '회');\n  console.log('실제 평균:', Math.round(averageAdjustedViews).toLocaleString(), '회');\n\n  // 2. 조회수 대비 좋아요 비율 계산\n  console.log('\\n=== 좋아요 비율 계산 ===');\n  const likeRatios = videoStats.map((stat, index) => {\n    const ratio = stat.likeCount / stat.viewCount;\n    console.log(`[동영상 ${index + 1}번] 좋아요율:`, (ratio * 100).toFixed(2), '%',\n      `(좋아요 ${stat.likeCount.toLocaleString()}개 / 조회수 ${stat.viewCount.toLocaleString()}회)`);\n    return ratio;\n  });\n  const averageLikeRatio = likeRatios.reduce((sum, ratio) => sum + ratio, 0) / N;\n\n  const likeMultiplier = getLikeRangeMultiplier(subscriberCount);\n  const likeMinThreshold = likeMultiplier.min;\n  const likeMaxThreshold = likeMultiplier.max;\n\n  console.log('\\n좋아요 성과 기준:');\n  console.log('최소 기준:', (likeMinThreshold * 100).toFixed(2), '%');\n  console.log('최대 기준:', (likeMaxThreshold * 100).toFixed(2), '%');\n  console.log('실제 평균:', (averageLikeRatio * 100).toFixed(2), '%');\n\n  // 3. 조회수 대비 댓글 비율 계산\n  console.log('\\n=== 댓글 비율 계산 ===');\n  const commentRatios = videoStats.map((stat, index) => {\n    const ratio = stat.commentCount / stat.viewCount;\n    console.log(`[동영상 ${index + 1}번] 댓글율:`, (ratio * 100).toFixed(2), '%',\n      `(댓글 ${stat.commentCount.toLocaleString()}개 / 조회수 ${stat.viewCount.toLocaleString()}회)`);\n    return ratio;\n  });\n  const averageCommentRatio = commentRatios.reduce((sum, ratio) => sum + ratio, 0) / N;\n  const commentMultiplier = getCommentRangeMultiplier(subscriberCount);\n  console.log('구독자수 대비 댓글 비율 기준값:', commentMultiplier);\n  const commentMinThreshold = commentMultiplier.min;\n  const commentMaxThreshold = commentMultiplier.max;\n\n  console.log('\\n댓글 성과 기준:');\n  console.log('최소 ���준:', (commentMinThreshold * 100).toFixed(2), '%');\n  console.log('최대 기준:', (commentMaxThreshold * 100).toFixed(2), '%');\n  console.log('실제 평균:', (averageCommentRatio * 100).toFixed(2), '%');\n\n  // 각 지표의 등급 판정\n  const getPerformanceLevel = (value: number, min: number, max: number): '미달' | '적정' | '우수' => {\n    if (value < min) return '미달';\n    if (value > max) return '우수';\n    return '적정';\n  };\n\n  const result = {\n    viewsPerformance: {\n      value: averageAdjustedViews,\n      level: getPerformanceLevel(averageAdjustedViews, viewsMinThreshold, viewsMaxThreshold)\n    },\n    likePerformance: {\n      value: averageLikeRatio,\n      level: getPerformanceLevel(averageLikeRatio, likeMinThreshold, likeMaxThreshold)\n    },\n    commentPerformance: {\n      value: averageCommentRatio,\n      level: getPerformanceLevel(averageCommentRatio, commentMinThreshold, commentMaxThreshold)\n    }\n  };\n\n  console.log('\\n=== 최종 성과 등급 ===');\n  console.log('조회수:', result.viewsPerformance.level);\n  console.log('좋아요:', result.likePerformance.level);\n  console.log('댓글:', result.commentPerformance.level);\n\n  return result;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}